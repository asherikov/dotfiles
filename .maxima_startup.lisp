(defun tex-matrix (x l r) ;; matrix looks like ((mmatrix)((mlist) a b) ...)
  (append l `("\\begin{bmatrix}")
     (mapcan #'(lambda(y)
              (tex-list (cdr y) nil (list " \\\\ ") " & "))
         (cdr x))
     '("\\end{bmatrix}") r))


(defun tex-mplus (x l r)
                    ;(declare (fixnum w))
  (cond ((member 'trunc (car x) :test #'eq) (setq r (cons "+\\cdots " r))))
  (cond ((null (cddr x))
     (if (null (cdr x))
         (tex-function x l r t)
         (tex (cadr x) (cons (format nil "~% + ~%") l) r 'mplus rop)))
    (t (setq l (tex (cadr x) l nil lop 'mplus)
         x (cddr x))
       (do ((nl l)  (dissym))
           ((null (cdr x))
        (if (mmminusp (car x)) (setq l (cadar x) dissym (list (format nil "~% - ~%")))
            (setq l (car x) dissym (list (format nil "~% + ~%"))))
        (setq r (tex l dissym r 'mplus rop))
        (append nl r))
         (if (mmminusp (car x)) (setq l (cadar x) dissym (list (format nil "~% - ~%")))
         (setq l (car x) dissym (list (format nil "~% + ~%"))))
         (setq nl (append nl (tex l dissym nil 'mplus 'mplus))
           x (cdr x))))))

(defun tex-paren (x l r)
  (tex x (append l '("(")) (cons ")" r) 'mparen 'mparen))

(defprop mnctimes (" ") texsym)
(defprop mtimes (" ") texsym)
(defprop mminus (" - ") texsym)
